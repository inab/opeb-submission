# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure('2') do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = 'ubuntu/xenial64'
  config.vm.provider 'virtualbox' do |v|
    v.name = 'OpenEBench'
  end

  # Remove defeault vagrant synced_folder binding
  config.vm.synced_folder '.', '/vagrant', disabled: true

  # Use vagrant-cachier plugin if exists for speed up the package management
  config.cache.scope = :box if Vagrant.has_plugin?('vagrant-cachier')

  # Use vagrant-vbguest plugin if exists for speed up the package management
  if Vagrant.has_plugin?('vagrant-vbguest')
    # set auto_update to false, if you do not want to check the correct
    # additions version when booting this machine
    config.vbguest.auto_update = false
  end

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  config.vm.network 'forwarded_port', guest: 22, host: 8022
  config.vm.network 'forwarded_port', guest: 2222, host: 8222
  # tusd
  config.vm.network 'forwarded_port', guest: 1080, host: 8080

  # Copy provision folders to the guest machine
  config.vm.provision 'file', source: 'installer', destination: '/tmp/installer'
  config.vm.provision 'file', source: 'management', destination: '/tmp/management'
  config.vm.provision 'file', source: 'tests', destination: '/tmp/tests'

  # Run provision scripts from the guest machine
  config.vm.provision 'shell', inline: 'apt update && apt install -y openssh-server sshpass 2>&1 > /dev/null'
  config.vm.provision 'shell', inline: '/tmp/installer/doInstall.sh'
  config.vm.provision 'shell', inline: '/tmp/tests/doInstall.sh 2>&1 > /dev/null'

   #config.vm.provision "shell", inline: <<-EOF
   #apt install -y golang
   ##export GOROOT=/usr/lib/go
   ##export GOPATH=$HOME/go
   ##export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
   #git clone https://github.com/tus/tusd.git
   #cd tusd
   #go get github.com/tus/tusd/cmd/tusd/cli
   #go run cmd/tusd/main.go &
   #EOF

  # Run provision test from the guest machine
  config.vm.provision 'shell', inline: '/tmp/tests/doTests.sh'

  # Run SFTP test from the host machine
  # Use vagrant-host-shell plugin if exists for speed up the package management
  if Vagrant.has_plugin?('vagrant-host-shell')
    config.vm.provision :host_shell do |host_shell|
      host_shell.inline = <<-EOF
      echo 'Running external SFTP tests...'
      tests/host/submitter_sftp_tests.sh
      EOF
      config.vm.provision 'shell', inline: '/tmp/tests/guest/submitter_tests_after_sftp.sh'
    end
  else
    STDERR.puts "\e[31m\e[1mvagrant-host-shell is required for running SFTP tests"
    STDERR.puts "install with: 'bundler install'"
    STDERR.puts "and run with: 'bundler exec vagrant'\e[0m"
  end
end
